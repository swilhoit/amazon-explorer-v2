{"ast":null,"code":"var _jsxFileName = \"/Users/samwilhoit/Downloads/jungle-scout-explorer/src/MainComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Container, Typography, Box } from '@mui/material';\nimport DataTable from './DataTable';\nimport { saveAs } from 'file-saver';\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainComponent = () => {\n  _s();\n  const [keywords, setKeywords] = useState('');\n  const [mergedData, setMergedData] = useState([]);\n  const handleKeywordsChange = event => {\n    setKeywords(event.target.value);\n    console.log('Keywords changed:', event.target.value);\n  };\n  const handleFetchData = async () => {\n    const keywordList = keywords.split(',').map(keyword => keyword.trim());\n    console.log('Fetching data for keywords:', keywordList);\n    const apiKey = process.env.REACT_APP_JUNGLE_SCOUT_API_KEY;\n    const keyName = process.env.REACT_APP_JUNGLE_SCOUT_KEY_NAME;\n    const url = \"https://developer.junglescout.com/api/product_database_query\";\n    const headers = {\n      'Authorization': `${keyName}:${apiKey}`,\n      'X-API-Type': 'junglescout',\n      'Accept': 'application/vnd.junglescout.v1+json',\n      'Content-Type': 'application/vnd.api+json'\n    };\n    const promises = keywordList.map(keyword => axios.post(url, {\n      data: {\n        attributes: {\n          keyword,\n          marketplace: 'us'\n        }\n      }\n    }, {\n      headers\n    }).catch(error => {\n      console.error(`API request failed for keyword ${keyword}:`, error);\n      return null;\n    }));\n    try {\n      const responses = await Promise.all(promises);\n      console.log('API responses received:', responses);\n      const validResponses = responses.filter(response => response && response.data);\n      const results = validResponses.map(response => response.data);\n      const flattenedResults = results.flatMap(result => result.data.map(item => ({\n        asin: item.id,\n        title: item.attributes.title,\n        brand: item.attributes.brand,\n        sellerType: item.attributes.seller_type,\n        reviews: item.attributes.reviews,\n        rating: item.attributes.rating,\n        price: item.attributes.price,\n        sales: item.attributes.approximate_30_day_units_sold,\n        revenue: item.attributes.approximate_30_day_revenue,\n        fbaFee: item.attributes.fba_fee,\n        referralFee: item.attributes.referral_fee,\n        totalFees: item.attributes.total_fees,\n        dimensions: item.attributes.dimensions,\n        weight: item.attributes.weight,\n        imageUrl: item.attributes.image_url,\n        dateFirstAvailable: item.attributes.date_first_available,\n        originalKeyword: item.attributes.original_keyword\n      })));\n      console.log('Flattened results:', flattenedResults);\n      const averages = calculateAverages(flattenedResults);\n      console.log('Averages:', averages);\n      setMergedData([averages, ...flattenedResults]);\n    } catch (error) {\n      console.error(\"API request processing failed:\", error);\n    }\n  };\n  const calculateAverages = data => {\n    const avg = {};\n    const keys = ['price', 'sales', 'revenue', 'fbaFee', 'referralFee', 'totalFees', 'reviews', 'rating', 'weight'];\n    keys.forEach(key => {\n      avg[key] = data.reduce((sum, row) => sum + parseFloat(row[key] || 0), 0) / data.length;\n    });\n    avg.title = 'Averages';\n    avg.asin = 'N/A';\n    avg.brand = 'N/A';\n    avg.sellerType = 'N/A';\n    avg.dimensions = 'N/A';\n    avg.imageUrl = 'N/A';\n    avg.dateFirstAvailable = 'N/A';\n    avg.originalKeyword = 'N/A';\n    return avg;\n  };\n  const saveToFile = () => {\n    console.log('Saving data to file...');\n    const csvHeaders = Object.keys(mergedData[0]).join(',');\n    const csvRows = mergedData.map(row => Object.values(row).join(',')).join('\\n');\n    const csvData = `${csvHeaders}\\n${csvRows}`;\n    const blob = new Blob([csvData], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    saveAs(blob, 'merged_output.csv');\n    console.log('Data saved to merged_output.csv');\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      my: 4,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: \"Jungle Scout Product Explorer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Enter keywords separated by commas\",\n          variant: \"outlined\",\n          fullWidth: true,\n          value: keywords,\n          onChange: handleKeywordsChange,\n          style: {\n            marginRight: 10\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: handleFetchData,\n          children: \"Fetch Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: saveToFile,\n        children: \"Save to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n        data: mergedData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(ScatterChart, {\n          margin: {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            type: \"number\",\n            dataKey: \"price\",\n            name: \"Price\",\n            unit: \"$\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n            type: \"number\",\n            dataKey: \"sales\",\n            name: \"Sales\",\n            unit: \" units\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            cursor: {\n              strokeDasharray: '3 3'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Scatter, {\n            name: \"Products\",\n            data: mergedData.slice(1),\n            fill: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(MainComponent, \"9qkdFyzbcTiVSKtvTfUU/0d8uI4=\");\n_c = MainComponent;\nexport default MainComponent;\nvar _c;\n$RefreshReg$(_c, \"MainComponent\");","map":{"version":3,"names":["React","useState","axios","TextField","Button","Container","Typography","Box","DataTable","saveAs","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","jsxDEV","_jsxDEV","MainComponent","_s","keywords","setKeywords","mergedData","setMergedData","handleKeywordsChange","event","target","value","console","log","handleFetchData","keywordList","split","map","keyword","trim","apiKey","process","env","REACT_APP_JUNGLE_SCOUT_API_KEY","keyName","REACT_APP_JUNGLE_SCOUT_KEY_NAME","url","headers","promises","post","data","attributes","marketplace","catch","error","responses","Promise","all","validResponses","filter","response","results","flattenedResults","flatMap","result","item","asin","id","title","brand","sellerType","seller_type","reviews","rating","price","sales","approximate_30_day_units_sold","revenue","approximate_30_day_revenue","fbaFee","fba_fee","referralFee","referral_fee","totalFees","total_fees","dimensions","weight","imageUrl","image_url","dateFirstAvailable","date_first_available","originalKeyword","original_keyword","averages","calculateAverages","avg","keys","forEach","key","reduce","sum","row","parseFloat","length","saveToFile","csvHeaders","Object","join","csvRows","values","csvData","blob","Blob","type","children","my","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","mb","label","fullWidth","onChange","style","marginRight","color","onClick","width","height","margin","top","right","bottom","left","dataKey","name","unit","cursor","strokeDasharray","slice","fill","_c","$RefreshReg$"],"sources":["/Users/samwilhoit/Downloads/jungle-scout-explorer/src/MainComponent.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Container, Typography, Box } from '@mui/material';\nimport DataTable from './DataTable';\nimport { saveAs } from 'file-saver';\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst MainComponent = () => {\n    const [keywords, setKeywords] = useState('');\n    const [mergedData, setMergedData] = useState([]);\n\n    const handleKeywordsChange = (event) => {\n        setKeywords(event.target.value);\n        console.log('Keywords changed:', event.target.value);\n    };\n\n    const handleFetchData = async () => {\n        const keywordList = keywords.split(',').map(keyword => keyword.trim());\n        console.log('Fetching data for keywords:', keywordList);\n\n        const apiKey = process.env.REACT_APP_JUNGLE_SCOUT_API_KEY;\n        const keyName = process.env.REACT_APP_JUNGLE_SCOUT_KEY_NAME;\n        const url = \"https://developer.junglescout.com/api/product_database_query\";\n\n        const headers = {\n            'Authorization': `${keyName}:${apiKey}`,\n            'X-API-Type': 'junglescout',\n            'Accept': 'application/vnd.junglescout.v1+json',\n            'Content-Type': 'application/vnd.api+json',\n        };\n\n        const promises = keywordList.map((keyword) =>\n            axios.post(url, {\n                data: { attributes: { keyword, marketplace: 'us' } },\n            }, { headers }).catch(error => {\n                console.error(`API request failed for keyword ${keyword}:`, error);\n                return null;\n            })\n        );\n\n        try {\n            const responses = await Promise.all(promises);\n            console.log('API responses received:', responses);\n\n            const validResponses = responses.filter(response => response && response.data);\n            const results = validResponses.map((response) => response.data);\n\n            const flattenedResults = results.flatMap(result => result.data.map(item => ({\n                asin: item.id,\n                title: item.attributes.title,\n                brand: item.attributes.brand,\n                sellerType: item.attributes.seller_type,\n                reviews: item.attributes.reviews,\n                rating: item.attributes.rating,\n                price: item.attributes.price,\n                sales: item.attributes.approximate_30_day_units_sold,\n                revenue: item.attributes.approximate_30_day_revenue,\n                fbaFee: item.attributes.fba_fee,\n                referralFee: item.attributes.referral_fee,\n                totalFees: item.attributes.total_fees,\n                dimensions: item.attributes.dimensions,\n                weight: item.attributes.weight,\n                imageUrl: item.attributes.image_url,\n                dateFirstAvailable: item.attributes.date_first_available,\n                originalKeyword: item.attributes.original_keyword,\n            })));\n\n            console.log('Flattened results:', flattenedResults);\n\n            const averages = calculateAverages(flattenedResults);\n            console.log('Averages:', averages);\n\n            setMergedData([averages, ...flattenedResults]);\n        } catch (error) {\n            console.error(\"API request processing failed:\", error);\n        }\n    };\n\n    const calculateAverages = (data) => {\n        const avg = {};\n        const keys = [\n            'price',\n            'sales',\n            'revenue',\n            'fbaFee',\n            'referralFee',\n            'totalFees',\n            'reviews',\n            'rating',\n            'weight'\n        ];\n\n        keys.forEach(key => {\n            avg[key] = data.reduce((sum, row) => sum + parseFloat(row[key] || 0), 0) / data.length;\n        });\n\n        avg.title = 'Averages';\n        avg.asin = 'N/A';\n        avg.brand = 'N/A';\n        avg.sellerType = 'N/A';\n        avg.dimensions = 'N/A';\n        avg.imageUrl = 'N/A';\n        avg.dateFirstAvailable = 'N/A';\n        avg.originalKeyword = 'N/A';\n\n        return avg;\n    };\n\n    const saveToFile = () => {\n        console.log('Saving data to file...');\n        const csvHeaders = Object.keys(mergedData[0]).join(',');\n        const csvRows = mergedData.map(row => Object.values(row).join(',')).join('\\n');\n        const csvData = `${csvHeaders}\\n${csvRows}`;\n        const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' });\n        saveAs(blob, 'merged_output.csv');\n        console.log('Data saved to merged_output.csv');\n    };\n\n    return (\n        <Container>\n            <Box my={4}>\n                <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n                    Jungle Scout Product Explorer\n                </Typography>\n                <Box display=\"flex\" alignItems=\"center\" mb={2}>\n                    <TextField\n                        label=\"Enter keywords separated by commas\"\n                        variant=\"outlined\"\n                        fullWidth\n                        value={keywords}\n                        onChange={handleKeywordsChange}\n                        style={{ marginRight: 10 }}\n                    />\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleFetchData}>\n                        Fetch Data\n                    </Button>\n                </Box>\n                <Button variant=\"contained\" color=\"secondary\" onClick={saveToFile}>\n                    Save to CSV\n                </Button>\n                <DataTable data={mergedData} />\n                <ResponsiveContainer width=\"100%\" height={400}>\n                    <ScatterChart\n                        margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\n                    >\n                        <CartesianGrid />\n                        <XAxis type=\"number\" dataKey=\"price\" name=\"Price\" unit=\"$\" />\n                        <YAxis type=\"number\" dataKey=\"sales\" name=\"Sales\" unit=\" units\" />\n                        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                        <Scatter name=\"Products\" data={mergedData.slice(1)} fill=\"#8884d8\" />\n                    </ScatterChart>\n                </ResponsiveContainer>\n            </Box>\n        </Container>\n    );\n};\n\nexport default MainComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}